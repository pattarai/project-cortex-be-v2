generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  userId               Int              @id(map: "public.users_pkey") @default(dbgenerated("nextval('\"public.users_userId_seq\"'::regclass)"))
  email                String           @db.VarChar(100)
  password             String           @db.VarChar(50)
  verifyEmail          String?          @db.VarChar(100)
  expiryDateVerify     DateTime?        @db.Timestamptz(6)
  phone                String?          @db.VarChar(15)
  forgotPasswordKey    String?          @db.VarChar(100)
  forgotPasswordExpiry DateTime?        @db.Timestamptz(6)
  firstName            String           @db.VarChar(15)
  lastName             String           @db.VarChar(15)
  dateOfBirth          DateTime?        @db.Timestamptz(6)
  collegeName          String?          @db.VarChar(50)
  department           String?          @db.VarChar(50)
  year                 Int?
  rollNumber           String?          @db.VarChar(30)
  registerNumber       String?          @db.VarChar(30)
  whatsappNumber       String?          @db.VarChar(15)
  instagramUrl         String?          @db.VarChar(150)
  githubUrl            String?          @db.VarChar(150)
  linkedInUrl          String?          @db.VarChar(150)
  profileUrl           String?          @db.VarChar(150)
  bitmojiUrl           String?          @db.VarChar(150)
  description          String?          @db.VarChar(150)
  committee            String           @db.VarChar(100)
  project              String           @db.VarChar(100)
  startDate            DateTime         @db.Timestamptz(6)
  isActive             Boolean          @default(true)
  phase                Int?
  isCompleted          Boolean?         @default(false)
  attendance           attendance[]
  office_bearers       office_bearers[]
  ranking              ranking[]
}

model attendance {
  attendanceId Int    @id @default(autoincrement())
  userId       Int
  eventId      Int
  status       Int    @default(0)
  events       events @relation(fields: [eventId], references: [eventId], onDelete: NoAction, onUpdate: NoAction, map: "FK_eventId_attendance")
  users        users  @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "FK_userId_attendance")
}

model events {
  eventId             Int                   @id(map: "public.events_pkey") @default(dbgenerated("nextval('\"public.events_eventId_seq\"'::regclass)"))
  eventName           String                @db.VarChar(50)
  eventType           String                @db.VarChar(50)
  eventDate           DateTime              @db.Timestamptz(6)
  phase               Int
  conductedBy         String?               @db.VarChar(20)
  name                String?               @db.VarChar(30)
  attendance          attendance[]
  external_attendance external_attendance[]
}

model external_attendance {
  externalId Int    @id @default(autoincrement())
  eventId    Int
  name       String @db.VarChar(30)
  events     events @relation(fields: [eventId], references: [eventId], onDelete: NoAction, onUpdate: NoAction, map: "FK_eventId_external")
}

model factors {
  factorId   Int       @id @default(autoincrement())
  factorName String    @db.VarChar(50)
  maxScore   Int
  phase      Int
  ranking    ranking[]
}

model office_bearers {
  officeBearersId Int   @id @default(autoincrement())
  userId          Int
  roleId          Int
  phase           Int
  roles           roles @relation(fields: [roleId], references: [roleId], onDelete: NoAction, onUpdate: NoAction, map: "FKrole")
  users           users @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "FKuser")
}

model ranking {
  rankId   Int     @id @default(autoincrement())
  userId   Int
  factorId Int
  score    Int
  factors  factors @relation(fields: [factorId], references: [factorId], onDelete: NoAction, onUpdate: NoAction, map: "FK_factorId_ranking")
  users    users   @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction, map: "FK_userId_ranking")
}

model roles {
  roleId         Int              @id @default(autoincrement())
  role           String           @db.VarChar(50)
  accessLevel    String
  office_bearers office_bearers[]
}
